{"ast":null,"code":"import _slicedToArray from \"/Users/tiannalopes/Desktop/reward-points-master/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/tiannalopes/Desktop/reward-points-master/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/tiannalopes/Desktop/reward-points-master/src/App.js\";\nimport React, { useState, useEffect } from \"react\";\nimport fetch from \"./dataService\";\nimport ReactTable from \"react-table\";\nimport \"./App.css\";\nimport _ from \"lodash\";\n\nfunction calculateResults(incomingData) {\n  // Calculate points per transaction\n  const months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\n  const pointsPerTransaction = incomingData.map(transaction => {\n    let points = 0;\n    let over100 = transaction.amt - 100;\n\n    if (over100 > 0) {\n      // A customer receives 2 points for every dollar spent over $100 in each transaction\n      points += over100 * 2;\n    }\n\n    if (transaction.amt > 50) {\n      // plus 1 point for every dollar spent over $50 in each transaction\n      points += 50;\n    }\n\n    const month = new Date(transaction.transactionDt).getMonth();\n    return _objectSpread({}, transaction, {\n      points,\n      month\n    });\n  });\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach(pointsPerTransaction => {\n    let custid = pointsPerTransaction.custid,\n        name = pointsPerTransaction.name,\n        month = pointsPerTransaction.month,\n        points = pointsPerTransaction.points;\n\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n\n    totalPointsByCustomer[name] += points;\n\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    } else {\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        points\n      };\n    }\n  });\n  let tot = [];\n\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach(cRow => {\n      tot.push(cRow);\n    });\n  }\n\n  let totByCustomer = [];\n\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey]\n    });\n  }\n\n  return {\n    total: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer: totByCustomer\n  };\n}\n\nfunction App() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        transactionData = _useState2[0],\n        setTransactionData = _useState2[1];\n\n  const columns = [{\n    Header: \"Customer\",\n    accessor: \"name\"\n  }, {\n    Header: \"Month\",\n    accessor: \"month\"\n  }, {\n    Header: \"Reward Points\",\n    accessor: \"points\"\n  }];\n  const totalsByColumns = [{\n    Header: \"Customer\",\n    accessor: \"name\"\n  }, {\n    Header: \" Reward Points\",\n    accessor: \"points\"\n  }];\n\n  function singleTrans(row) {\n    let byCustMonth = _.filter(transactionData.pointsPerTransaction, tRow => {\n      return row.original.custid === tRow.custid && row.original.monthNumber === tRow.month;\n    });\n\n    return byCustMonth;\n  }\n\n  useEffect(() => {\n    fetch().then(data => {\n      const results = calculateResults(data);\n      setTransactionData(results);\n    });\n  }, []);\n\n  if (transactionData == null) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Loading...\");\n  }\n\n  return transactionData == null ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, \"Loading...\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Points Rewards System Totals by Customer Months\"))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(ReactTable, {\n    data: transactionData.total,\n    columns: columns,\n    SubComponent: row => {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, singleTrans(row).map(tran => {\n        return React.createElement(\"div\", {\n          className: \"container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 156\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"row\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"col-8\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 158\n          },\n          __self: this\n        }, React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 159\n          },\n          __self: this\n        }, \"Transaction Date:\"), \" \", tran.transactionDt, \" - \", React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 160\n          },\n          __self: this\n        }, \"$\"), tran.amt, \" - \", React.createElement(\"strong\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 161\n          },\n          __self: this\n        }, \"Points: \"), \"`Points \", tran.points)));\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: \"container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-10\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"Points Rewards System Totals By Customer\"))), React.createElement(\"div\", {\n    className: \"row\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"col-8\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183\n    },\n    __self: this\n  }, React.createElement(ReactTable, {\n    data: transactionData.totalPointsByCustomer,\n    columns: totalsByColumns,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  })))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/tiannalopes/Desktop/reward-points-master/src/App.js"],"names":["React","useState","useEffect","fetch","ReactTable","_","calculateResults","incomingData","months","pointsPerTransaction","map","transaction","points","over100","amt","month","Date","transactionDt","getMonth","byCustomer","totalPointsByCustomer","forEach","custid","name","monthNumber","numTransactions","tot","custKey","cRow","push","totByCustomer","total","App","transactionData","setTransactionData","columns","Header","accessor","totalsByColumns","singleTrans","row","byCustMonth","filter","tRow","original","then","data","results","tran"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport fetch from \"./dataService\";\nimport ReactTable from \"react-table\";\nimport \"./App.css\";\nimport _ from \"lodash\";\n\nfunction calculateResults(incomingData) {\n  // Calculate points per transaction\n\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n  const pointsPerTransaction = incomingData.map((transaction) => {\n    let points = 0;\n    let over100 = transaction.amt - 100;\n\n    if (over100 > 0) {\n      // A customer receives 2 points for every dollar spent over $100 in each transaction\n      points += over100 * 2;\n    }\n    if (transaction.amt > 50) {\n      // plus 1 point for every dollar spent over $50 in each transaction\n      points += 50;\n    }\n    const month = new Date(transaction.transactionDt).getMonth();\n    return { ...transaction, points, month };\n  });\n\n  let byCustomer = {};\n  let totalPointsByCustomer = {};\n  pointsPerTransaction.forEach((pointsPerTransaction) => {\n    let { custid, name, month, points } = pointsPerTransaction;\n    if (!byCustomer[custid]) {\n      byCustomer[custid] = [];\n    }\n    if (!totalPointsByCustomer[custid]) {\n      totalPointsByCustomer[name] = 0;\n    }\n    totalPointsByCustomer[name] += points;\n    if (byCustomer[custid][month]) {\n      byCustomer[custid][month].points += points;\n      byCustomer[custid][month].monthNumber = month;\n      byCustomer[custid][month].numTransactions++;\n    } else {\n      byCustomer[custid][month] = {\n        custid,\n        name,\n        monthNumber: month,\n        month: months[month],\n        numTransactions: 1,\n        points,\n      };\n    }\n  });\n  let tot = [];\n  for (var custKey in byCustomer) {\n    byCustomer[custKey].forEach((cRow) => {\n      tot.push(cRow);\n    });\n  }\n  let totByCustomer = [];\n  for (custKey in totalPointsByCustomer) {\n    totByCustomer.push({\n      name: custKey,\n      points: totalPointsByCustomer[custKey],\n    });\n  }\n  return {\n    total: tot,\n    pointsPerTransaction,\n    totalPointsByCustomer: totByCustomer,\n  };\n}\n\nfunction App() {\n  const [transactionData, setTransactionData] = useState(null);\n\n  const columns = [\n    {\n      Header: \"Customer\",\n      accessor: \"name\",\n    },\n    {\n      Header: \"Month\",\n      accessor: \"month\",\n    },\n\n    {\n      Header: \"Reward Points\",\n      accessor: \"points\",\n    },\n  ];\n  const totalsByColumns = [\n    {\n      Header: \"Customer\",\n      accessor: \"name\",\n    },\n    {\n      Header: \" Reward Points\",\n      accessor: \"points\",\n    },\n  ];\n\n  function singleTrans(row) {\n    let byCustMonth = _.filter(transactionData.pointsPerTransaction, (tRow) => {\n      return (\n        row.original.custid === tRow.custid &&\n        row.original.monthNumber === tRow.month\n      );\n    });\n    return byCustMonth;\n  }\n\n  useEffect(() => {\n    fetch().then((data) => {\n      const results = calculateResults(data);\n      setTransactionData(results);\n    });\n  }, []);\n\n  if (transactionData == null) {\n    return <div>Loading...</div>;\n  }\n\n  return transactionData == null ? (\n    <div>Loading...</div>\n  ) : (\n    <div>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10\">\n            <h2>Points Rewards System Totals by Customer Months</h2>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <ReactTable\n              data={transactionData.total}\n              columns={columns}\n              SubComponent={(row) => {\n                return (\n                  <div>\n                    {singleTrans(row).map((tran) => {\n                      return (\n                        <div className=\"container\">\n                          <div className=\"row\">\n                            <div className=\"col-8\">\n                              <strong>Transaction Date:</strong>{\" \"}\n                              {tran.transactionDt} - <strong>$</strong>\n                              {tran.amt} - <strong>Points: </strong>\n                              `Points {tran.points}\n                            </div>\n                          </div>\n                        </div>\n                      );\n                    })}\n                  </div>\n                );\n              }}\n            />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col-10\">\n            <h2>Points Rewards System Totals By Customer</h2>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col-8\">\n            <ReactTable\n              data={transactionData.totalPointsByCustomer}\n              columns={totalsByColumns}\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}